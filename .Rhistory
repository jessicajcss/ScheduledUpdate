readr::write_csv(thermo_repos, "./data_raw/thermo_repos.csv")
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv")
class(thermo_repos)
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
class(thermo_repos)
thermo_repos <- thermo_repos |>
as
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos |>
as.data.frame() |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos |>
data.frame('id_repo' = thermo_repos$id_repo,
'name' = thermo_repos1$name,
'value' = thermo_repos1$value) |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <-
data.frame('id_repo' = thermo_repos$id_repo,
'name' = thermo_repos1$name,
'value' = thermo_repos1$value) |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos |>
purrr::flatten()
thermo_repos <- thermo_repos |>
purrr::flatten()
View(thermo_repos)
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
thermo_repos[[1]]
thermo_repos[[2]]
thermo_repos[[3]]
thermo_repos[, c(1,2,3)]
thermo_repos <- thermo_repos[, c(1,2,3)] |>
tidyr::pivot_wider(
names_from = name,
values_from = value
)
thermo_repos <- thermo_repos |>
group_by(name)  |>
mutate(row = row_number())
thermo_repos <- thermo_repos |>
dplyr::group_by(name)  |>
dplyr::mutate(row = row_number())
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
thermo_repos <- thermo_repos |>
dplyr::group_by(name)  |>
dplyr::mutate(row = row_number())
thermo_repos <- thermo_repos |>
dplyr::group_by(mode)  |>
dplyr::mutate(row = row_number())
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
colnames(thermo_repos)
thermo_repos <- thermo_repos |>
dplyr::group_by("name")
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
thermo_repos <- thermo_repos |>
dplyr::group_by("name")  |>
mutate(row = row_number())
thermo_repos <- thermo_repos |>
dplyr::group_by("name")  |>
dplyr::mutate(row = row_number())
thermo_repos <- thermo_repos |>
dplyr::group_by("name")  |>
dplyr::mutate(row = dplyr::row_number())
View(thermo_repos)
thermo_repos <- thermo_repos |>
distinct() |>
tidyr::pivot_wider(
names_from = name,
values_from = value
)
thermo_repos <- thermo_repos |>
dplyr::distinct() |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos |>
dplyr::distinct() |>
tidyr::pivot_wider(
names_from = name,
values_from = value
)
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
thermo_repos <- thermo_repos |>
dplyr::distinct() |>
tidyr::pivot_wider(
names_from = name,
values_from = value
)
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
print(thermo_repos1)
thermo_repos <- data.frame('id_repo' = thermo_repos1$id_repo,
'name' = thermo_repos1$name,
'value' = thermo_repos1$value)
print(thermo_repos)
class(thermo_repos)
colnames(thermo_repos)
thermo_repos[1]
thermo_repos <- data.frame('id_repo2' = thermo_repos1$id_repo,
'name2' = thermo_repos1$name,
'value2' = thermo_repos1$value)
thermo_repos <- thermo_repos |>
dplyr::distinct() |>
tidyr::pivot_wider(
names_from = name2,
values_from = value2
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
thermo_repos <- thermo_repos1 |>
dplyr::distinct() |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
thermo_repos <- thermo_repos1 |>
dplyr::select(id_repo, name, value)
thermo_repos <- thermo_repos1 |>
dplyr::select(id_repo, name, value) |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::gather(id_repo, name, value)
thermo_repos <- thermo_repos1 |>
tidyr::gather()
thermo_repos <- thermo_repos1 |>
tidyselect::vars_select(id_repo, name, value)
thermo_repos <- thermo_repos1 |>
tidyselect::vars_select(c(id_repo, name, value))
thermo_repos <- thermo_repos1 |>
tidyselect::vars_select(c('id_repo', 'name', 'value'))
rlang::last_trace()
(function(x)data.frame(Type=names(x), Value=x))(thermo_repos1)
thermo_repos <-
(function(x)data.frame(Type=names(x), Value=x))(thermo_repos1)
thermo_repos <- thermo_repos1 |>
tidyselect::vars_select(e)
thermo_repos <- thermo_repos1 |>
tidyselect::vars_select('e')
thermo_repos <- thermo_repos1 |>
tidyselect::vars_select(,'e')
thermo_repos <- thermo_repos1 |>
tidyr::spread(id_repo, name, value)
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
thermo_repos <- thermo_repos1 |>
tidyr::spread(name, value)
colnames(thermo_repos)
View(thermo_repos)
thermo_repos <- thermo_repos1 |>
tidyr::gather(name, value)
#dplyr::select(id_repo, name, value) |>
tidyr::pivot_wider(
names_from = Value.name,
values_from = Value.value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::spread(name, value) |>
#dplyr::select(id_repo, name, value) |>
tidyr::pivot_wider(
names_from = Value.name,
values_from = Value.value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
View(thermo_repos)
thermo_repos <- thermo_repos1 |>
tidyr::spread('name', 'value')
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
readr::write_csv(thermo_repos1, "./data_raw/thermo_repos.csv")
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
colnames(thermo_repos)
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = Value.name,
values_from = Value.value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
colnames(thermo_repos)
colnames(thermo_repos1)
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = 'name',
values_from = 'value'
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
class(thermo_repos1)
thermo_repos <- thermo_repos1 |>
as.data.frame()
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = 'name',
values_from = 'value'
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
dim(thermo_repos1)
head(thermo_repos1)
dim(thermo_repos1)
thermo_repos <- thermo_repos |>
as.data.frame()
class(thermo_repos)
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = 'name',
values_from = 'value'
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
dim(thermo_repos)
colnames(thermo_repos)
thermo_repos <- thermo_repos |>
tidyr::pivot_wider() |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos |>
reshape2::dcast(id_repo + value ~ name)
thermo_repos <- thermo_repos1 |>
reshape2::melt(id_repo + value ~ name)
thermo_repos <- thermo_repos1 |>
reshape2::cast(id_repo + value ~ name)
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
colnames(thermo_repos)
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
colnames(thermo_repos1)
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = "name",
values_from = "value"
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
#Extracting the path variable from the output of above request
thermo_repos_raw <- httr::GET("https://api.github.com/repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
httr::authenticate(Sys.getenv("GITHUB_PAT"), ""),
Accept = "application/vnd.github.v3.raw")
thermo_repos0 <- httr::content(thermo_repos_raw)$tree
thermo_repos <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos_raw <-
purrr::map(thermo_git, ~ gh::gh(
"GET /repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
.token = Sys.getenv("GITHUB_PAT"),
.accept = "application/vnd.github.v3.raw")
)
thermo_git <- c("GM-RioBranco")
thermo_repos_raw <-
purrr::map(thermo_git, ~ gh::gh(
"GET /repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
.token = Sys.getenv("GITHUB_PAT"),
.accept = "application/vnd.github.v3.raw")
)
# transform into a tibble with few cols
thermo_repos <- thermo_repos_raw[[1]]$tree |>
#purrr::flatten() |>
purrr::map(unlist, recursive = TRUE)  |>
purrr::map_dfr(tibble::enframe, .id = "id_repo") |>
tidyr::pivot_wider() |>
dplyr::filter(stringr::str_detect(path,'.lsi')) |>
tidyr::separate(path, c('folder','filename'),'/')
thermo_repos_raw <-
purrr::map(thermo_git, ~ gh::gh(
"GET /repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
.token = Sys.getenv("GITHUB_PAT"),
.accept = "application/vnd.github.v3.raw")
)
thermo_repos_raw
View(thermo_repos_raw)
# Define repositories to fetch (replace with your list of repositories)
quarto_orgs <- c("Dados_GM_UFPR")  # Replace with actual repo names
github_pat <- Sys.getenv("GITHUB_PAT")
# Function to fetch the trees for each repository
get_repo_trees <- function(repo_name) {
# GitHub API endpoint to get the repository's tree
cat("Fetching tree for repo:", repo_name, "\n")
response <- gh::gh(
"GET /repos/{owner}/{repo}/git/trees/{tree_sha}",
owner = "jessicajcss",  # Replace with the owner of the repository
repo = repo_name,
tree_sha = "main",  # Replace with the tree SHA you want to retrieve, e.g., 'main' or a specific SHA
.token = github_pat,  # Use the GitHub PAT from the environment
.accept = "application/vnd.github.v3.raw",
recursive = F
)
cat("Response received for repo:", repo_name, "\n")
return(response)
}
# Iterate over all repositories and fetch the trees
thermo_repos_raw <- purrr::map(quarto_orgs, function(repo) {
tryCatch(
{
response <- get_repo_trees(repo)
cat("Successfully fetched tree for repo:", repo, "\n")
return(response)
},
error = function(e) {
cat("Error fetching tree for repo:", repo, "\n", "Error message:", e$message, "\n")
return(NULL)
}
)
})
thermo_repos0 <- purrr::map(thermo_repos_raw, ~ .x$tree)
thermo_repos <- thermo_repos_raw[[1]]$tree
thermo_repos0 <- purrr::map(thermo_repos_raw, ~ .x$tree)
github_pat <- Sys.getenv("GITHUB_PAT")
# Function to fetch the trees for each repository
get_repo_trees <- function(repo_name) {
# GitHub API endpoint to get the repository's tree
cat("Fetching tree for repo:", repo_name, "\n")
response <- gh::gh(
"GET /repos/{owner}/{repo}/git/trees/{tree_sha}",
owner = "jessicajcss",  # Replace with the owner of the repository
repo = repo_name,
tree_sha = "main",  # Replace with the tree SHA you want to retrieve, e.g., 'main' or a specific SHA
.token = github_pat,  # Use the GitHub PAT from the environment
.accept = "application/vnd.github.v3.raw",
recursive = F
)
cat("Response received for repo:", repo_name, "\n")
return(response)
}
# Iterate over all repositories and fetch the trees
thermo_repos_raw <- purrr::map(quarto_orgs, function(repo) {
tryCatch(
{
response <- get_repo_trees(repo)
cat("Successfully fetched tree for repo:", repo, "\n")
return(response)
},
error = function(e) {
cat("Error fetching tree for repo:", repo, "\n", "Error message:", e$message, "\n")
return(NULL)
}
)
})
# Print the result
print(thermo_repos_raw)
thermo_repos <- thermo_repos_raw[[1]]$tree |>
#purrr::flatten() |>
purrr::map(unlist, recursive = TRUE)  |>
purrr::map_dfr(tibble::enframe, .id = "id_repo") |>
tidyr::pivot_wider() |>
dplyr::filter(stringr::str_detect(path,'.lsi')) |>
tidyr::separate(path, c('folder','filename'),'/')
source("R/00-access-REPOnewdata-thermo-git.R")
View(thermo_repos1)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
View(data_thermo)
#https://www.r-bloggers.com/2020/09/running-an-r-script-on-a-schedule-gh-actions/
renv::init()
renv::status()
#https://www.r-bloggers.com/2020/09/running-an-r-script-on-a-schedule-gh-actions/
renv::init()
renv::status()
renv::snapshot()
source("R/00-access-REPOnewdata-thermo-git.R")
source("R/00-access-REPOnewdata-thermo-git.R")
load("./data/air_quality_data_ugm3.Rda")
View(air_quality_data_ugm3)
load("./data/dataaggfinal.Rda")
View(air_quality_data_ugm3)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
View(air_quality_data_ugm3)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/dataaggfinal.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
View(data_thermo)
load(url("https://github.com/jessicajcss/ScheduledUpdate/raw/refs/heads/main/data/data_thermo_update.Rda"))
View(data_thermo)
load("./data/data_thermo_update.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
View(air_quality_data_ugm3)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
View(data_thermo)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/dataaggfinal.Rda")
View(dataaggfinal)
#source("./scripts/00-preprocessing_thermo_GitHub_data.R")
load(url("https://github.com/jessicajcss/ScheduledUpdate/raw/refs/heads/main/data/data_thermo_update.Rda"))
View(data_thermo)
source("R/00-data_wrangling_thermo.R")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_instantaneo_ugm3.Rda")
View(data_thermo_instantaneo)
shiny::runApp('R')
runApp('R')
# ---
meteo <- read.csv("./data/meteo_hour.csv")
save(meteo, file = "./data/meteo_hour.Rda")
# ---
load("./data/meteo_hour.Rda")
runApp('R')
localizacao <- read.csv("./data/locais_sensores.csv",
sep = ";")
runApp('R')
runApp('R')
runApp('R')
localizacao <- read_csv("./data/locais_sensores.csv")
localizacao <- read_csv("./data/locais_sensores.csv", sep = ";")
localizacao <- read_csv("./data/locais_sensores.csv", delim = ";")
localizacao <- read.csv("./data/locais_sensores.csv", sep = ";")
runApp('R')
getwd()
localizacao <- read.csv("./data/locais_sensores.csv", sep = ";")
runApp('R')
load(url("https://github.com/jessicajcss/ScheduledUpdate/raw/refs/heads/main/data/data_thermo_instantaneo_ugm3.Rda"))
View(data_thermo_instantaneo)
usethis::edit_r_environ()
renv::status()
#https://www.r-bloggers.com/2020/09/running-an-r-script-on-a-schedule-gh-actions/
renv::init()
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_instantaneo_ugm3.Rda")
