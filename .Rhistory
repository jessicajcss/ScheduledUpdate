"\n🗓 Registro: ", registro,
"\n✅ Valor dentro do limite recomendado.\n"
)
}
out[[i]]$message <- message
out[[i]]$qualidade <- paste0("\n *Qualidade do Ar* (IQA): \n *", qualidade, "* nas últimas 24h ⚠️")
} else {
subset_alerta <- alerta |> subset(Cidade == City) |>
dplyr::mutate(concentration = round(concentration, 1)) |>
dplyr::mutate(pollutant = replace(pollutant, pollutant == 'PM2.5', "MP2.5"),
pollutant = replace(pollutant, pollutant == 'PM10', "MP10"))
if (nrow(subset_alerta) == 0) next  # Skip if empty
if (is.null(out[[i]])) out[[i]] <- list()  # Ensure the list exists
excede <- sum(subset_alerta$limite, na.rm = T)
if (j > nrow(subset_alerta)) next  # Avoid out-of-bounds error
valor <- subset_alerta$concentration[j]
registro <- lubridate::ymd_hms(subset_alerta$date)[j] |>
lubridate::force_tz("America/Sao_Paulo") |>
format(format = "%d/%m/%Y %H:%Mh")
unidade <- ifelse(subset_alerta$pollutant[j] == "CO", " mg/m³", " µg/m³")
Cidade <- subset_alerta$Cidade |> unique()
iqa <- IQA_last24H$AQI[IQA_last24H$Cidade == Cidade]
qualidade <- IQA_last24H$AQI_Qualidade[IQA_last24H$Cidade == Cidade] |>
stringr::str_to_upper()
out[[i]]$Cidade <- Cidade
current_value <- ifelse(excede >= 1, 1, 0)
message <- if (current_value >= threshold) {
paste0(
"\n Poluente: \n 🌬  ", subset_alerta$pollutant[4], ":  ", subset_alerta$concentration[4], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[5], ":  ", subset_alerta$concentration[5], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[1], ":  ", subset_alerta$concentration[1], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[3], ":  ", subset_alerta$concentration[3], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[6], ":  ", subset_alerta$concentration[6], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[2], ":  ", subset_alerta$concentration[2], " ", unidade,
"\n🗓 Registro: ", registro,
"\n🚨 ALERTA: Valor(es) excede(m) o limite recomendado!\n"
)
} else {
paste0(
"\n Poluente: \n 🌬  ", subset_alerta$pollutant[4], ":  ", subset_alerta$concentration[4], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[5], ":  ", subset_alerta$concentration[5], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[1], ":  ", subset_alerta$concentration[1], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[3], ":  ", subset_alerta$concentration[3], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[6], ":  ", subset_alerta$concentration[6], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[2], ":  ", subset_alerta$concentration[2], " ", unidade,
"\n🗓 Registro: ", registro,
"\n✅ Valor dentro do limite recomendado.\n"
)
}
out[[i]]$message <- message
out[[i]]$qualidade <- paste0("\n *Qualidade do Ar* (IQA): \n *", qualidade, "* nas últimas 24h ⚠️")
}
}
#  out[[i]]$qualidade <- paste0("\n *Qualidade do Ar* (IQA): \n *", qualidade, "* nas últimas 24h ⚠️")
}
library(httr)
library(jsonlite)
IQA_last24H <- dplyr::filter(IQA_last24H, !is.na(Cidade))
#### Acessing Purpleair data and scheduling its update
### Last update: 2025-05-12
## By: Santos-Silva, J. C.
options("menu.graphics" = FALSE)
conflicted::conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(purrr::flatten)
conflicted::conflicts_prefer(dplyr::lag)
source("R/00-getPurpleairApiHistory.R")
purpleair_api <- Sys.getenv("PURPLEAIR_API")
#esse id pode ser obtido no mapa da PurpleAir, selecione apenas os de interesse
sensor_id <-  c('175095', '175099', '175101', '175103',
'175109', '175115', '175121', '175123',
'175235', '175393', '175395', '175387',
'175403', '175407', '175451',
'91267', '99667')
#Mais informações em https://api.purpleair.com/
variaveis <- c("latitude, longitude, humidity, temperature,
pm1.0_atm, pm1.0_atm_a, pm1.0_atm_b,
pm2.5_atm, pm2.5_atm_a, pm2.5_atm_b,
pm2.5_cf_1, pm2.5_cf_1_a, pm2.5_cf_1_b") # para corrigir PM2.5
# Baixando os dados últimas 24h
todos_purpleair <- getPurpleairApiHistory(
sensorIndex    = sensor_id,
apiReadKey     = purpleair_api, #https://develop.purpleair.com/keys ### AJUSTA AQUI
startTimeStamp = Sys.time() - 86400,#*365*2, ### AJUSTA AQUI
endTimeStamp   = Sys.time(), ### AJUSTA AQUI
average        = "0", ### em tempo real
fields         = variaveis)
# Fixing datetime ----
todos_purpleair$date <- with_tz(todos_purpleair$time_stamp, tz = "America/Sao_Paulo")
#### corrigindo concentracao conforme razão entre a/b e melhor coerência nas concentracoes
todos_purpleair[c(4:12)][todos_purpleair[c(4:12)] > 100] <- NA
summary(todos_purpleair)
purpleair <- todos_purpleair %>%
mutate(a_b = pm2.5_cf_1_a/pm2.5_cf_1_b,
pm2.5_cf = ifelse((is.na(a_b) & is.na(pm2.5_cf_1_b)), pm2.5_cf_1_a,
ifelse((is.na(a_b) & is.na(pm2.5_cf_1_a)), pm2.5_cf_1_b,
ifelse((a_b > 1.1 | a_b < 0.9) & (pm2.5_cf_1_a > pm2.5_cf_1_b), pm2.5_cf_1_b,
ifelse((a_b > 1.1 | a_b < 0.9) & (pm2.5_cf_1_b > pm2.5_cf_1_a), pm2.5_cf_1_a,
pm2.5_cf_1)))),
PM2.5 = 0.524*pm2.5_cf - 0.0862*humidity + 5.75,
temperature = (temperature - 32) * 5/9)
summary(purpleair)
### Filtering according to the installation date
purpleair <- purpleair %>%
mutate(sensor_id = case_when(sensor_id == '91267' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '99667' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175095' & date <= "2023-07-24 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175099' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175101' & date <= "2023-07-20 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175103' & date <= "2023-09-15 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175109' & date <= "2023-07-20 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175115' & date <= "2023-08-15 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175121' & date <= "2023-07-20 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175123' & date <= "2023-05-31 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175235' & date <= "2023-10-23 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175387' & date <= "2023-08-22 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175393' & date <= "2023-09-14 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175395' & date <= "2023-05-31 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175403' & date <= "2023-09-25 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175407' & date <= "2023-06-06 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175411' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175451' & date <= "2023-09-14 00:00:00" ~ NA, TRUE ~ sensor_id))
purpleair <- purpleair %>%
dplyr::filter(!is.na(sensor_id))
## identificando os locais de sensores
data_purpleair <- purpleair %>%
dplyr::filter(sensor_id != "175411") %>%
mutate(sensor_id = as.character(sensor_id),
date = force_tz(date, tz = "America/Sao_Paulo"),
Cidade = case_when(sensor_id == '91267' ~ "Rio Branco do Sul",
sensor_id == '99667' ~ "Campo Largo",
sensor_id == "175095" ~ "Almirante Tamandaré",
sensor_id == '175099' ~ "Rio Branco do Sul",
sensor_id == '175101' ~ "Rio Branco do Sul",
sensor_id == '175103' ~ "Campo Largo",
sensor_id == '175109' ~ "Rio Branco do Sul",
sensor_id == '175115' ~ "Almirante Tamandaré",
sensor_id == '175121' ~ "Itaperuçú",
sensor_id == '175123' ~ "Rio Branco do Sul",
sensor_id == '175395' ~ "Rio Branco do Sul",
sensor_id == '175235' ~ "Campo Largo",
sensor_id == '175387' ~ "Rio Branco do Sul",
sensor_id == '175393' ~ "Itaperuçú",
sensor_id == '175385' ~ "Rio Branco do Sul",
sensor_id == "175403" ~ "Campo Largo",
sensor_id == "175407" ~ "Colombo",
sensor_id == "175451" ~ "Itaperuçú",
TRUE ~ sensor_id),
Tipo = case_when(sensor_id == '91267' ~ "outdoor",
sensor_id == '99667' ~ "outdoor",
sensor_id == "175095" ~ "outdoor",
sensor_id == '175099' ~ "outdoor",
sensor_id == '175101' ~ "outdoor",
sensor_id == '175103' ~ "outdoor",
sensor_id == '175109' ~ "outdoor",
sensor_id == '175115' ~ "outdoor",
sensor_id == '175121' ~ "outdoor",
sensor_id == '175123' ~ "outdoor",
sensor_id == '175395' ~ "outdoor",
sensor_id == '175235' ~ "outdoor",
sensor_id == '175387' ~ "outdoor",
sensor_id == '175393' ~ "outdoor",
sensor_id == '175385' ~ "outdoor",
sensor_id == "175403" ~ "outdoor",
sensor_id == "175407" ~ "outdoor",
sensor_id == "175451" ~ "outdoor",
TRUE ~ NA),
sensor_id = case_when(sensor_id == '91267' ~ "Dona Suzana",
sensor_id == '99667' ~ "Escola Hans",
sensor_id == "175095" ~ "Prefeitura",
sensor_id == '175099' ~ "Dona Suzana",
sensor_id == '175101' ~ "Dona Eliete",
sensor_id == '175103' ~ "Escola Madalena",
sensor_id == '175109' ~ "Dona Eliete",
sensor_id == '175115' ~ "Escola João Candido",
sensor_id == '175121' ~ "Prefeitura",
sensor_id == '175123' ~ "Defesa Civil",
sensor_id == '175395' ~ "Defesa Civil",
sensor_id == '175235' ~ "SME",
sensor_id == '175387' ~ "Escola Hilda",
sensor_id == '175393' ~ "Escola Cândidos",
sensor_id == '175385' ~ "Defesa Civil",
sensor_id == "175403" ~ "SMMA",
sensor_id == "175407" ~ "Embrapa",
sensor_id == "175451" ~ "Pombas",
TRUE ~ sensor_id))
#  --------------------------------------------------------------------------------------------------------
#                                              AQI FUNCTIONS
#  --------------------------------------------------------------------------------------------------------
calcAQI <- function(Cp, Ih, Il, BPh, BPl) {
a <- (Ih - Il)
b <- (BPh - BPl)
c <- (Cp - BPl)
return(round((a/b) * c + Il))
}
#################### AQI_INDEX BY POLLUTANT
AQI_Qualidade <- function(aqi) {
#                                     AQI
# Good                               0 - 50   |
# Moderate                          51 - 100  |
# Unhealthy for Sensitive Groups   101 – 150  |
# Unhealthy                        151 – 200  |
# Very Unhealthy                   201 – 300  |
# Hazardous                        301 – 500  |
if (aqi > 200) {
return("Péssima")  # Hazardous
} else if (aqi > 200) {
return("Muito Ruim")  # Very Unhealthy
} else if (aqi > 150) {
return("Ruim")   # Unhealthy
} else if (aqi > 100) {
return("Ruim para grupos sensíveis")    # Unhealthy for Sensitive Groups
} else if (aqi > 50) {
return("Moderada")     # Moderate
} else if (aqi >= 0) {
return("Boa")            # Good
} else {
return("Boa") # corrigido de NA, considerando erro em alguns momentos qie haviam valores de AQI, mas não de qualidade 2025-04-08
}
}
#################### BY POLLUTANT
aqiFromPM25 <- function(pm) {
#                                     AQI         RAW PM2.5  (ug/m³, 24-hour)
# Good                               0 - 50   |  0.0 – 9.0
# Moderate                          51 - 100  |  9.1 – 35.4
# Unhealthy for Sensitive Groups   101 – 150  |  35.5 – 55.4
# Unhealthy                        151 – 200  |  55.5 – 125.4
# Very Unhealthy                   201 – 300  |  125.5 – 225.4
# Hazardous                        301 – 500  |  225.5 – 500.4
if (pm > 225.5) {
return(calcAQI(pm, 500, 301, 500.4, 225.5))  # Hazardous
} else if (pm > 125.5) {
return(calcAQI(pm, 300, 201, 225.4, 125.5))  # Very Unhealthy
} else if (pm > 55.5) {
return(calcAQI(pm, 200, 151, 125.4, 55.5))   # Unhealthy
} else if (pm > 35.5) {
return(calcAQI(pm, 150, 101, 55.4, 35.5))    # Unhealthy for Sensitive Groups
} else if (pm > 9.1) {
return(calcAQI(pm, 100, 51, 35.4, 9.1))     # Moderate
} else if (pm >= 0) {
return(calcAQI(pm, 50, 0, 9, 0))            # Good
} else {
return(0) # correct NA IQA
}
}
###########################################
# Matching thermo data X legislation
data_purpleair_instantaneo <- data_purpleair |>
subset(PM2.5 <= 100) #REMOVING VALUES SUPPOSEDLY OFF CHARTS
save(data_purpleair_instantaneo, file = "./data/data_purpleair_instantaneo.Rda")
# Matching thermo data X legislation
data_purpleair_new <- data_purpleair   %>%
dplyr::mutate(PM2.5 = ifelse(PM2.5 < -100, NA, PM2.5))  %>%
dplyr::mutate(PM2.5 = ifelse(PM2.5 < -0, 0, PM2.5)) %>%
select(Cidade, Tipo, sensor_id, date, PM2.5) %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d", tz = "America/Sao_Paulo")) %>%
dplyr::select(-date) %>%
drop_na() %>%
subset(PM2.5 <= 100) %>% #REMOVING VALUES SUPPOSEDLY OFF CHARTS
dplyr::group_by(Cidade, sample_day) %>%
dplyr::mutate(PM2.5 = mean(PM2.5, na.rm = T)) %>%
unique() %>%
replace(is.na(.), -999) %>% #WORKING AROUND NA VALUES
dplyr::rowwise() %>%
dplyr::mutate(AQI_PM2.5 = aqiFromPM25(PM2.5),
AQI_Qualidade = ifelse(!is.na(AQI_PM2.5), AQI_Qualidade(AQI_PM2.5), NA))  %>%
dplyr::mutate_all(~ ifelse(. < -100, NA, .))  %>%
dplyr::mutate_all(~ ifelse(. < -0, 0, .))
load(file = "./data/data_purpleair.Rda")
#unifying datasets
data_purpleair <- rbind(data_purpleair, data_purpleair_new) %>%
unique()
# Selecionando dados do dia, última hora
hoje_hora <- Sys.time() |> lubridate::force_tz("America/Sao_Paulo")
if (lubridate::hour(hoje_hora) != 0) {
# Selecionando dados do dia
hoje <- Sys.Date() |> lubridate::force_tz("America/Sao_Paulo")
} else {
hoje <- (Sys.Date() -1) |> lubridate::force_tz("America/Sao_Paulo")
}
# THERMO data in real time, in ug/m³ and mg/m³ (CO)
load(file = "./data/data_thermo_instantaneo_ugm3.Rda")
lubridate::tz(data_thermo_instantaneo$date)
# PURPLEAIR data in real time, in ug/m³
load(file = "./data/data_purpleair_instantaneo.Rda")
if (hoje %in% data_thermo_instantaneo$date[data_thermo_instantaneo$Cidade == "Rio Branco do Sul"]) {
data_purpleair_instantaneo <- data_purpleair_instantaneo |>
dplyr::select(Cidade, date, PM2.5) |>
subset(Cidade != "Rio Branco do Sul") #& Cidade != "Almirante Tamandaré")
} else {
data_purpleair_instantaneo <- data_purpleair_instantaneo |>
dplyr::select(Cidade, date, PM2.5)
}
if (hoje %in% data_thermo_instantaneo$date[data_thermo_instantaneo$Cidade == "Almirante Tamandaré"]) {
data_purpleair_instantaneo <- data_purpleair_instantaneo |>
dplyr::select(Cidade, date, PM2.5) |>
subset(Cidade != "Almirante Tamandaré")
}
data_purpleair_instantaneo$PM2.5[data_purpleair_instantaneo$PM2.5 < 0] <- 0
# unificando dados sensores
real_time <- dplyr::bind_rows(data_thermo_instantaneo, data_purpleair_instantaneo)
# selecionando ultimo registro do dia
alerta <- real_time |>
dplyr::select(-rh_sensor) |>
tidyr::pivot_longer(-c('Cidade','date'),
values_to = "concentration",
names_to = "pollutant") |>
dplyr::mutate(
limite = ifelse(pollutant == 'SO2' & concentration >= 40, 1,
ifelse(pollutant == 'NO2' & concentration >= 25, 1,
ifelse(pollutant == 'PM10' & concentration >= 45, 1,
ifelse(pollutant == 'PM2.5' & concentration >= 15, 1,
ifelse(pollutant == 'CO' & concentration >= 4, 1, 0)))))) |>
dplyr::mutate(day = as.Date(date, tz = "America/Sao_Paulo")) |>
subset(day == hoje & !is.na(concentration)) |>
dplyr::group_by(Cidade, day, pollutant) |>
dplyr::slice_max(order_by = date, n = 1) |>
unique()
################# NOTICE: IQA last 24 h #################
# THERMO IQA last 24h
load(file = "./data/air_quality_data.Rda")
thermo_iqa <- air_quality_data |>
dplyr::mutate(sensor = "Thermo GM-5000")
# PURPLEAIR IQA last 24h
load(file = "./data/data_purpleair.Rda")
if (hoje %in% data_thermo_instantaneo$date[data_thermo_instantaneo$Cidade == "Rio Branco do Sul"]) {
purpleair_iqa <- data_purpleair |>
dplyr::mutate(sensor = "PurpleAir",
AQI = AQI_PM2.5)  |>
subset(Cidade != "Rio Branco do Sul") #& Cidade != "Almirante Tamandaré")
} else {
purpleair_iqa <- data_purpleair |>
dplyr::mutate(sensor = "PurpleAir",
AQI = AQI_PM2.5)
}
if (hoje %in% data_thermo_instantaneo$date[data_thermo_instantaneo$Cidade == "Almirante Tamandaré"]) {
purpleair_iqa <- data_purpleair |>
dplyr::mutate(sensor = "PurpleAir",
AQI = AQI_PM2.5)  |>
subset(Cidade != "Almirante Tamandaré")
}
# unificando dados sensores
IQA_last24H <- dplyr::bind_rows(thermo_iqa, purpleair_iqa)
Cidades <- IQA_last24H$Cidade |>
unique() |>
sort()
IQA_last24H <- IQA_last24H |>
dplyr::mutate(date = lubridate::force_tz(sample_day, tz = "America/Sao_Paulo")) |>
subset(date == hoje) |>
dplyr::select(Cidade, AQI, AQI_Qualidade) |>
dplyr::group_by(Cidade) |>
dplyr::slice_max(order_by = AQI, n = 1) |> #selecionar valor máximo das últimas 24h
unique()
# Simulated value (replace with real data)
threshold <- 1
IQA_last24H <- dplyr::filter(IQA_last24H, !is.na(Cidade))
print(dim(IQA_last24H))  # <-- Isso imprimirá (número de linhas, número de colunas)
out <- vector("list", nrow(IQA_last24H))  # Initialize the list
for (i in 1:nrow(IQA_last24H)) {
for (j in 1:length(unique(alerta$pollutant))) {
City <- Cidades[i]
print(paste("City:", City))  # Debugging
print(paste("Iteração", i, "- Cidade:", City))
if ((City != "Rio Branco do Sul" | !(as.Date(lubridate::force_tz(hoje, tz = "America/Sao_Paulo")) %in% as.Date(lubridate::force_tz(data_thermo_instantaneo$date, tz = "America/Sao_Paulo"))[data_thermo_instantaneo$Cidade == "Rio Branco do Sul"])) & # quando RBS, FALSE
(City != "Almirante Tamandaré" | !(as.Date(lubridate::force_tz(hoje, tz = "America/Sao_Paulo")) %in% as.Date(lubridate::force_tz(data_thermo_instantaneo$date, tz = "America/Sao_Paulo"))[data_thermo_instantaneo$Cidade == "Almirante Tamandaré"]))) {
subset_alerta <- alerta |> subset(Cidade == City & pollutant == "PM2.5") |>
dplyr::mutate(concentration = round(concentration, 1))
if (nrow(subset_alerta) == 0) next  # Skip if empty
if (is.null(out[[i]])) out[[i]] <- list()  # Ensure the list exists
excede <- ifelse(rlang::is_empty(subset_alerta$limite), "não medido", subset_alerta$limite)
particulas <- 'MP2.5'
valor <- subset_alerta$concentration
registro <- unique(lubridate::ymd_hms(subset_alerta$date)) |>
lubridate::force_tz("America/Sao_Paulo") |>
format(format = "%d/%m/%Y %H:%Mh")
unidade <- " µg/m³"
iqa <- IQA_last24H$AQI[IQA_last24H$Cidade == subset_alerta$Cidade]
qualidade <- IQA_last24H$AQI_Qualidade[IQA_last24H$Cidade == subset_alerta$Cidade] |>
stringr::str_to_upper()
out[[i]]$Cidade <- subset_alerta$Cidade
current_value <- ifelse(excede >= 1, 1, 0)
message <- if (current_value >= threshold) {
paste0(
"\n🌬 Poluente: \n   ", particulas, ": ", valor, unidade,
"\n🗓 Registro: ", registro,
"\n🚨 ALERTA: Valor excede o limite recomendado!"
)
} else {
paste0(
"\n🌬 Poluente: \n   ", particulas, ": ", valor, unidade,
"\n🗓 Registro: ", registro,
"\n✅ Valor dentro do limite recomendado.\n"
)
}
out[[i]]$message <- message
out[[i]]$qualidade <- paste0("\n *Qualidade do Ar* (IQA): \n *", qualidade, "* nas últimas 24h ⚠️")
} else {
subset_alerta <- alerta |> subset(Cidade == City) |>
dplyr::mutate(concentration = round(concentration, 1)) |>
dplyr::mutate(pollutant = replace(pollutant, pollutant == 'PM2.5', "MP2.5"),
pollutant = replace(pollutant, pollutant == 'PM10', "MP10"))
if (nrow(subset_alerta) == 0) next  # Skip if empty
if (is.null(out[[i]])) out[[i]] <- list()  # Ensure the list exists
excede <- sum(subset_alerta$limite, na.rm = T)
if (j > nrow(subset_alerta)) next  # Avoid out-of-bounds error
valor <- subset_alerta$concentration[j]
registro <- lubridate::ymd_hms(subset_alerta$date)[j] |>
lubridate::force_tz("America/Sao_Paulo") |>
format(format = "%d/%m/%Y %H:%Mh")
unidade <- ifelse(subset_alerta$pollutant[j] == "CO", " mg/m³", " µg/m³")
Cidade <- subset_alerta$Cidade |> unique()
iqa <- IQA_last24H$AQI[IQA_last24H$Cidade == Cidade]
qualidade <- IQA_last24H$AQI_Qualidade[IQA_last24H$Cidade == Cidade] |>
stringr::str_to_upper()
out[[i]]$Cidade <- Cidade
current_value <- ifelse(excede >= 1, 1, 0)
message <- if (current_value >= threshold) {
paste0(
"\n Poluente: \n 🌬  ", subset_alerta$pollutant[4], ":  ", subset_alerta$concentration[4], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[5], ":  ", subset_alerta$concentration[5], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[1], ":  ", subset_alerta$concentration[1], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[3], ":  ", subset_alerta$concentration[3], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[6], ":  ", subset_alerta$concentration[6], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[2], ":  ", subset_alerta$concentration[2], " ", unidade,
"\n🗓 Registro: ", registro,
"\n🚨 ALERTA: Valor(es) excede(m) o limite recomendado!\n"
)
} else {
paste0(
"\n Poluente: \n 🌬  ", subset_alerta$pollutant[4], ":  ", subset_alerta$concentration[4], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[5], ":  ", subset_alerta$concentration[5], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[1], ":  ", subset_alerta$concentration[1], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[3], ":  ", subset_alerta$concentration[3], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[6], ":  ", subset_alerta$concentration[6], " ", unidade,
"\n 🌬  ", subset_alerta$pollutant[2], ":  ", subset_alerta$concentration[2], " ", unidade,
"\n🗓 Registro: ", registro,
"\n✅ Valor dentro do limite recomendado.\n"
)
}
out[[i]]$message <- message
out[[i]]$qualidade <- paste0("\n *Qualidade do Ar* (IQA): \n *", qualidade, "* nas últimas 24h ⚠️")
}
}
#  out[[i]]$qualidade <- paste0("\n *Qualidade do Ar* (IQA): \n *", qualidade, "* nas últimas 24h ⚠️")
}
vector("list", nrow(IQA_last24H))
out <- vector("list", nrow(IQA_last24H))  # Initialize the list
IQA_last24H
alerta
Cidades
IQA_last24H <- dplyr::filter(IQA_last24H, !is.na(Cidade))
Cidades <- IQA_last24H$Cidade |>
unique() |>
sort()
Cidades
alerta
IQA_last24H
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_purpleair.Rda")
View(data_purpleair)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data_raw/sensores_thermo/20250222_sensores_thermo_unificado.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data_raw/sensores_thermo/20250222_sensores_thermo_unificado.Rda")
# baixar banco de dados unificado
load("./data_raw/sensores_thermo/20250222_sensores_thermo_unificado.Rda")
data_thermo_insitu <- data_thermo
#Dados em tempo local, mas lidos em UTC
#salvar novos arquivos insitu nessa pasta, para então puxar aqui
temp <- list.files(path = "./data_raw/sensores_thermo",
pattern = "*.csv") # listar arquivos .csv do diretório
# aplicar leitura das planilhas contidas na listagem temp
dir <- "./data_raw/sensores_thermo"
temp.qualified <- paste(dir, temp, sep = "/")
myfiles <- lapply(temp.qualified,
readr::read_delim,
col_select = c(1:21))
colnames(myfiles[[1]]) == colnames(myfiles[[4]])
colnames(myfiles[[4]]) <- colnames(myfiles[[1]])
colnames(myfiles[[1]]) == colnames(myfiles[[5]])
colnames(myfiles[[5]]) <- colnames(myfiles[[1]])
bind_rows
# unificar planilhas de dados
data_thermo_new <- do.call("bind_rows", myfiles)
# unificar planilhas de dados
library(tidyverse)
data_thermo_new <- do.call("bind_rows", myfiles)
View(data_thermo_new)
colnames(data_thermo_insitu) <- colnames(data_thermo_new)
data_thermo <- rbind(data_thermo_insitu, data_thermo_new[, c(1:21)]) |>
unique()
data_thermo_insitu <- data_thermo |>
dplyr::mutate(date = as.Date(localDate, tz = "America/Sao_Paulo"), # Local time
Cidade = dplyr::recode((instrumentName),
"thermo-grid-883f4a344cbe" = "Rio Branco do Sul", #02/08/23 15:50
"thermo-grid-f4e11e8e1321" = "Almirante Tamandaré"))  |> #15/08/2023 11:45
subset(Cidade == "Rio Branco do Sul" | Cidade == "Almirante Tamandaré")  |>
subset(date >= as.Date("2023-08-02", tz = "America/Sao_Paulo")) |>
unique() |>
dplyr::mutate(date = lubridate::ymd_hms(paste0(date,
" ", localTime),
tz = "America/Sao_Paulo")) |>
dplyr::select(Cidade, date, so2, no2, o3, co, pm2p5, pm10,  rh)
colnames(data_thermo_insitu) <- c('Cidade','date','SO2', 'NO2', 'O3', 'CO', 'PM2.5','PM10', 'rh_sensor')
# Saving
save(data_thermo_insitu, file = "./data_raw/wrangled_data_insitu_thermo.Rda")
data_thermo_converted <- data_thermo_insitu %>%
mutate(CO = CO*1.15, #from ppm to mg/m³
O3 = O3*1.96, #from ppb to ug/m³
NO2 = NO2*1.88, #from ppb to ug/m³
SO2 = SO2*2.62, #from ppb to ug/m³
PM2.5 = PM2.5, # ug/m³
PM10 = PM10) #from ppb to ug/m³
load(file="./data/data_thermo_update.Rda")
data_thermo <- rbind(data_thermo_insitu, data_thermo) |> unique()
save(data_thermo, file="./data_raw/data_thermo.Rda")
