purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
readr::write_csv(thermo_repos1, "./data_raw/thermo_repos.csv")
thermo_repos <- readr::read_csv("./data_raw/thermo_repos.csv") |> as.data.frame()
colnames(thermo_repos)
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = Value.name,
values_from = Value.value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
colnames(thermo_repos)
colnames(thermo_repos1)
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = 'name',
values_from = 'value'
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
class(thermo_repos1)
thermo_repos <- thermo_repos1 |>
as.data.frame()
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = 'name',
values_from = 'value'
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
dim(thermo_repos1)
head(thermo_repos1)
dim(thermo_repos1)
thermo_repos <- thermo_repos |>
as.data.frame()
class(thermo_repos)
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = 'name',
values_from = 'value'
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
dim(thermo_repos)
colnames(thermo_repos)
thermo_repos <- thermo_repos |>
tidyr::pivot_wider() |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos <- thermo_repos |>
reshape2::dcast(id_repo + value ~ name)
thermo_repos <- thermo_repos1 |>
reshape2::melt(id_repo + value ~ name)
thermo_repos <- thermo_repos1 |>
reshape2::cast(id_repo + value ~ name)
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
colnames(thermo_repos)
thermo_repos1 <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
colnames(thermo_repos1)
thermo_repos <- thermo_repos1 |>
tidyr::pivot_wider(
names_from = "name",
values_from = "value"
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
#Extracting the path variable from the output of above request
thermo_repos_raw <- httr::GET("https://api.github.com/repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
httr::authenticate(Sys.getenv("GITHUB_PAT"), ""),
Accept = "application/vnd.github.v3.raw")
thermo_repos0 <- httr::content(thermo_repos_raw)$tree
thermo_repos <- thermo_repos0 |>
purrr::map(unlist, recursive = TRUE) |>
purrr::map_dfr(function(x) {
tibble::enframe(x, name = "name", value = "value")
}, .id = "id_repo") |>
as.data.frame()
thermo_repos <- thermo_repos |>
tidyr::pivot_wider(
names_from = name,
values_from = value
) |>
subset(stringr::str_detect(value, '.lsi')) |>
tidyr::separate(path, c('folder', 'filename'), '/')
thermo_repos_raw <-
purrr::map(thermo_git, ~ gh::gh(
"GET /repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
.token = Sys.getenv("GITHUB_PAT"),
.accept = "application/vnd.github.v3.raw")
)
thermo_git <- c("GM-RioBranco")
thermo_repos_raw <-
purrr::map(thermo_git, ~ gh::gh(
"GET /repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
.token = Sys.getenv("GITHUB_PAT"),
.accept = "application/vnd.github.v3.raw")
)
# transform into a tibble with few cols
thermo_repos <- thermo_repos_raw[[1]]$tree |>
#purrr::flatten() |>
purrr::map(unlist, recursive = TRUE)  |>
purrr::map_dfr(tibble::enframe, .id = "id_repo") |>
tidyr::pivot_wider() |>
dplyr::filter(stringr::str_detect(path,'.lsi')) |>
tidyr::separate(path, c('folder','filename'),'/')
thermo_repos_raw <-
purrr::map(thermo_git, ~ gh::gh(
"GET /repos/jessicajcss/Dados_GM_UFPR/git/trees/main?recursive=1/",
.token = Sys.getenv("GITHUB_PAT"),
.accept = "application/vnd.github.v3.raw")
)
thermo_repos_raw
View(thermo_repos_raw)
# Define repositories to fetch (replace with your list of repositories)
quarto_orgs <- c("Dados_GM_UFPR")  # Replace with actual repo names
github_pat <- Sys.getenv("GITHUB_PAT")
# Function to fetch the trees for each repository
get_repo_trees <- function(repo_name) {
# GitHub API endpoint to get the repository's tree
cat("Fetching tree for repo:", repo_name, "\n")
response <- gh::gh(
"GET /repos/{owner}/{repo}/git/trees/{tree_sha}",
owner = "jessicajcss",  # Replace with the owner of the repository
repo = repo_name,
tree_sha = "main",  # Replace with the tree SHA you want to retrieve, e.g., 'main' or a specific SHA
.token = github_pat,  # Use the GitHub PAT from the environment
.accept = "application/vnd.github.v3.raw",
recursive = F
)
cat("Response received for repo:", repo_name, "\n")
return(response)
}
# Iterate over all repositories and fetch the trees
thermo_repos_raw <- purrr::map(quarto_orgs, function(repo) {
tryCatch(
{
response <- get_repo_trees(repo)
cat("Successfully fetched tree for repo:", repo, "\n")
return(response)
},
error = function(e) {
cat("Error fetching tree for repo:", repo, "\n", "Error message:", e$message, "\n")
return(NULL)
}
)
})
thermo_repos0 <- purrr::map(thermo_repos_raw, ~ .x$tree)
thermo_repos <- thermo_repos_raw[[1]]$tree
thermo_repos0 <- purrr::map(thermo_repos_raw, ~ .x$tree)
github_pat <- Sys.getenv("GITHUB_PAT")
# Function to fetch the trees for each repository
get_repo_trees <- function(repo_name) {
# GitHub API endpoint to get the repository's tree
cat("Fetching tree for repo:", repo_name, "\n")
response <- gh::gh(
"GET /repos/{owner}/{repo}/git/trees/{tree_sha}",
owner = "jessicajcss",  # Replace with the owner of the repository
repo = repo_name,
tree_sha = "main",  # Replace with the tree SHA you want to retrieve, e.g., 'main' or a specific SHA
.token = github_pat,  # Use the GitHub PAT from the environment
.accept = "application/vnd.github.v3.raw",
recursive = F
)
cat("Response received for repo:", repo_name, "\n")
return(response)
}
# Iterate over all repositories and fetch the trees
thermo_repos_raw <- purrr::map(quarto_orgs, function(repo) {
tryCatch(
{
response <- get_repo_trees(repo)
cat("Successfully fetched tree for repo:", repo, "\n")
return(response)
},
error = function(e) {
cat("Error fetching tree for repo:", repo, "\n", "Error message:", e$message, "\n")
return(NULL)
}
)
})
# Print the result
print(thermo_repos_raw)
thermo_repos <- thermo_repos_raw[[1]]$tree |>
#purrr::flatten() |>
purrr::map(unlist, recursive = TRUE)  |>
purrr::map_dfr(tibble::enframe, .id = "id_repo") |>
tidyr::pivot_wider() |>
dplyr::filter(stringr::str_detect(path,'.lsi')) |>
tidyr::separate(path, c('folder','filename'),'/')
source("R/00-access-REPOnewdata-thermo-git.R")
View(thermo_repos1)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
View(data_thermo)
#https://www.r-bloggers.com/2020/09/running-an-r-script-on-a-schedule-gh-actions/
renv::init()
renv::status()
#https://www.r-bloggers.com/2020/09/running-an-r-script-on-a-schedule-gh-actions/
renv::init()
renv::status()
renv::snapshot()
source("R/00-access-REPOnewdata-thermo-git.R")
source("R/00-access-REPOnewdata-thermo-git.R")
load("./data/air_quality_data_ugm3.Rda")
View(air_quality_data_ugm3)
load("./data/dataaggfinal.Rda")
View(air_quality_data_ugm3)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
View(air_quality_data_ugm3)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/dataaggfinal.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
View(data_thermo)
load(url("https://github.com/jessicajcss/ScheduledUpdate/raw/refs/heads/main/data/data_thermo_update.Rda"))
View(data_thermo)
load("./data/data_thermo_update.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
View(air_quality_data_ugm3)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_update.Rda")
View(data_thermo)
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/dataaggfinal.Rda")
View(dataaggfinal)
#source("./scripts/00-preprocessing_thermo_GitHub_data.R")
load(url("https://github.com/jessicajcss/ScheduledUpdate/raw/refs/heads/main/data/data_thermo_update.Rda"))
View(data_thermo)
source("R/00-data_wrangling_thermo.R")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_instantaneo_ugm3.Rda")
View(data_thermo_instantaneo)
shiny::runApp('R')
runApp('R')
# ---
meteo <- read.csv("./data/meteo_hour.csv")
save(meteo, file = "./data/meteo_hour.Rda")
# ---
load("./data/meteo_hour.Rda")
runApp('R')
localizacao <- read.csv("./data/locais_sensores.csv",
sep = ";")
runApp('R')
runApp('R')
runApp('R')
localizacao <- read_csv("./data/locais_sensores.csv")
localizacao <- read_csv("./data/locais_sensores.csv", sep = ";")
localizacao <- read_csv("./data/locais_sensores.csv", delim = ";")
localizacao <- read.csv("./data/locais_sensores.csv", sep = ";")
runApp('R')
getwd()
localizacao <- read.csv("./data/locais_sensores.csv", sep = ";")
runApp('R')
load(url("https://github.com/jessicajcss/ScheduledUpdate/raw/refs/heads/main/data/data_thermo_instantaneo_ugm3.Rda"))
View(data_thermo_instantaneo)
usethis::edit_r_environ()
renv::status()
#https://www.r-bloggers.com/2020/09/running-an-r-script-on-a-schedule-gh-actions/
renv::init()
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/air_quality_data_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_thermo_instantaneo_ugm3.Rda")
load("C:/Users/jessi/OneDrive/Post-Doc/Publicacoes/Git/ScheduledUpdate/data/data_purpleair.Rda")
View(data_purpleair)
Sys.time() - 60*86400
View(data_purpleair)
purpleair_api <- "6842E278-8078-11ED-B6F4-42010A800007"#Sys.getenv("PURPLEAIR_API")
#esse id pode ser obtido no mapa da PurpleAir, selecione apenas os de interesse
sensor_id <-  c('175095', '175099', '175101', '175103',
'175109', '175115', '175121', '175123',
'175235', '175393', '175395', '175387',
'175403', '175407', '175451',
'91267', '99667')
#Mais informações em https://api.purpleair.com/
variaveis <- c("latitude, longitude, humidity, temperature,
pm1.0_atm, pm1.0_atm_a, pm1.0_atm_b,
pm2.5_atm, pm2.5_atm_a, pm2.5_atm_b,
pm2.5_cf_1, pm2.5_cf_1_a, pm2.5_cf_1_b") # para corrigir PM2.5
todos_purpleair <- getPurpleairApiHistory(
sensorIndex    = sensor_id,
apiReadKey     = purpleair_api, #https://develop.purpleair.com/keys ### AJUSTA AQUI
startTimeStamp = Sys.time() - 60*86400, ### AJUSTA AQUI
endTimeStamp   = Sys.time(), ### AJUSTA AQUI
average        = "0", ### em tempo real
fields         = variaveis)
source("R/00-getPurpleairApiHistory.R")
purpleair_api <- "6842E278-8078-11ED-B6F4-42010A800007"#Sys.getenv("PURPLEAIR_API")
#esse id pode ser obtido no mapa da PurpleAir, selecione apenas os de interesse
sensor_id <-  c('175095', '175099', '175101', '175103',
'175109', '175115', '175121', '175123',
'175235', '175393', '175395', '175387',
'175403', '175407', '175451',
'91267', '99667')
#Mais informações em https://api.purpleair.com/
variaveis <- c("latitude, longitude, humidity, temperature,
pm1.0_atm, pm1.0_atm_a, pm1.0_atm_b,
pm2.5_atm, pm2.5_atm_a, pm2.5_atm_b,
pm2.5_cf_1, pm2.5_cf_1_a, pm2.5_cf_1_b") # para corrigir PM2.5
todos_purpleair <- getPurpleairApiHistory(
sensorIndex    = sensor_id,
apiReadKey     = purpleair_api, #https://develop.purpleair.com/keys ### AJUSTA AQUI
startTimeStamp = Sys.time() - 60*86400, ### AJUSTA AQUI
endTimeStamp   = Sys.time(), ### AJUSTA AQUI
average        = "0", ### em tempo real
fields         = variaveis)
todos_purpleair$date <- with_tz(todos_purpleair$time_stamp, tz = "America/Sao_Paulo")
#### corrigindo concentracao conforme razão entre a/b e melhor coerência nas concentracoes
todos_purpleair[c(4:12)][todos_purpleair[c(4:12)] > 100] <- NA
summary(todos_purpleair)
purpleair <- todos_purpleair %>%
mutate(a_b = pm2.5_cf_1_a/pm2.5_cf_1_b,
pm2.5_cf = ifelse((is.na(a_b) & is.na(pm2.5_cf_1_b)), pm2.5_cf_1_a,
ifelse((is.na(a_b) & is.na(pm2.5_cf_1_a)), pm2.5_cf_1_b,
ifelse((a_b > 1.1 | a_b < 0.9) & (pm2.5_cf_1_a > pm2.5_cf_1_b), pm2.5_cf_1_b,
ifelse((a_b > 1.1 | a_b < 0.9) & (pm2.5_cf_1_b > pm2.5_cf_1_a), pm2.5_cf_1_a,
pm2.5_cf_1)))),
PM2.5 = 0.524*pm2.5_cf - 0.0862*humidity + 5.75,
temperature = (temperature - 32) * 5/9)
summary(purpleair)
purpleair <- purpleair %>%
mutate(sensor_id = case_when(sensor_id == '91267' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '99667' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175095' & date <= "2023-07-24 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175099' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175101' & date <= "2023-07-20 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175103' & date <= "2023-09-15 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175109' & date <= "2023-07-20 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175115' & date <= "2023-08-15 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175121' & date <= "2023-07-20 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175123' & date <= "2023-05-31 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175235' & date <= "2023-10-23 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175387' & date <= "2023-08-22 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175393' & date <= "2023-09-14 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175395' & date <= "2023-05-31 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175403' & date <= "2023-09-25 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175407' & date <= "2023-06-06 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175411' & date <= "2023-10-19 00:00:00" ~ NA, TRUE ~ sensor_id),
sensor_id = case_when(sensor_id == '175451' & date <= "2023-09-14 00:00:00" ~ NA, TRUE ~ sensor_id))
purpleair <- purpleair %>%
filter(!is.na(sensor_id))
## identificando os locais de sensores
data_purpleair <- purpleair %>%
filter(sensor_id != "175411") %>%
mutate(sensor_id = as.character(sensor_id),
date = force_tz(date, tz = "America/Sao_Paulo"),
Cidade = case_when(sensor_id == '91267' ~ "Rio Branco do Sul",
sensor_id == '99667' ~ "Campo Largo",
sensor_id == "175095" ~ "Almirante Tamandaré",
sensor_id == '175099' ~ "Rio Branco do Sul",
sensor_id == '175101' ~ "Rio Branco do Sul",
sensor_id == '175103' ~ "Campo Largo",
sensor_id == '175109' ~ "Rio Branco do Sul",
sensor_id == '175115' ~ "Almirante Tamandaré",
sensor_id == '175121' ~ "Itaperuçú",
sensor_id == '175123' ~ "Rio Branco do Sul",
sensor_id == '175395' ~ "Rio Branco do Sul",
sensor_id == '175235' ~ "Campo Largo",
sensor_id == '175387' ~ "Rio Branco do Sul",
sensor_id == '175393' ~ "Itaperuçú",
sensor_id == '175385' ~ "Rio Branco do Sul",
sensor_id == "175403" ~ "Campo Largo",
sensor_id == "175407" ~ "Colombo",
sensor_id == "175451" ~ "Itaperuçú",
TRUE ~ sensor_id),
Tipo = case_when(sensor_id == '91267' ~ "outdoor",
sensor_id == '99667' ~ "outdoor",
sensor_id == "175095" ~ "outdoor",
sensor_id == '175099' ~ "outdoor",
sensor_id == '175101' ~ "outdoor",
sensor_id == '175103' ~ "outdoor",
sensor_id == '175109' ~ "outdoor",
sensor_id == '175115' ~ "outdoor",
sensor_id == '175121' ~ "outdoor",
sensor_id == '175123' ~ "outdoor",
sensor_id == '175395' ~ "outdoor",
sensor_id == '175235' ~ "outdoor",
sensor_id == '175387' ~ "outdoor",
sensor_id == '175393' ~ "outdoor",
sensor_id == '175385' ~ "outdoor",
sensor_id == "175403" ~ "outdoor",
sensor_id == "175407" ~ "outdoor",
sensor_id == "175451" ~ "outdoor",
TRUE ~ NA),
sensor_id = case_when(sensor_id == '91267' ~ "Dona Suzana",
sensor_id == '99667' ~ "Escola Hans",
sensor_id == "175095" ~ "Prefeitura",
sensor_id == '175099' ~ "Dona Suzana",
sensor_id == '175101' ~ "Dona Eliete",
sensor_id == '175103' ~ "Escola Madalena",
sensor_id == '175109' ~ "Dona Eliete",
sensor_id == '175115' ~ "Escola João Candido",
sensor_id == '175121' ~ "Prefeitura",
sensor_id == '175123' ~ "Defesa Civil",
sensor_id == '175395' ~ "Defesa Civil",
sensor_id == '175235' ~ "SME",
sensor_id == '175387' ~ "Escola Hilda",
sensor_id == '175393' ~ "Escola Cândidos",
sensor_id == '175385' ~ "Defesa Civil",
sensor_id == "175403" ~ "SMMA",
sensor_id == "175407" ~ "Embrapa",
sensor_id == "175451" ~ "Pombas",
TRUE ~ sensor_id))
calcAQI <- function(Cp, Ih, Il, BPh, BPl) {
a <- (Ih - Il)
b <- (BPh - BPl)
c <- (Cp - BPl)
return(round((a/b) * c + Il))
}
#################### AQI_INDEX BY POLLUTANT
AQI_Qualidade <- function(aqi) {
#                                     AQI
# Good                               0 - 50   |
# Moderate                          51 - 100  |
# Unhealthy for Sensitive Groups   101 – 150  |
# Unhealthy                        151 – 200  |
# Very Unhealthy                   201 – 300  |
# Hazardous                        301 – 500  |
if (aqi > 200) {
return("Péssima")  # Hazardous
} else if (aqi > 200) {
return("Muito Ruim")  # Very Unhealthy
} else if (aqi > 150) {
return("Ruim")   # Unhealthy
} else if (aqi > 100) {
return("Ruim para grupos sensíveis")    # Unhealthy for Sensitive Groups
} else if (aqi > 50) {
return("Moderada")     # Moderate
} else if (aqi >= 0) {
return("Boa")            # Good
} else {
return(NA)
}
}
#################### BY POLLUTANT
aqiFromPM25 <- function(pm) {
#                                     AQI         RAW PM2.5  (ug/m³, 24-hour)
# Good                               0 - 50   |  0.0 – 9.0
# Moderate                          51 - 100  |  9.1 – 35.4
# Unhealthy for Sensitive Groups   101 – 150  |  35.5 – 55.4
# Unhealthy                        151 – 200  |  55.5 – 125.4
# Very Unhealthy                   201 – 300  |  125.5 – 225.4
# Hazardous                        301 – 500  |  225.5 – 500.4
if (pm > 225.5) {
return(calcAQI(pm, 500, 301, 500.4, 225.5))  # Hazardous
} else if (pm > 125.5) {
return(calcAQI(pm, 300, 201, 225.4, 125.5))  # Very Unhealthy
} else if (pm > 55.5) {
return(calcAQI(pm, 200, 151, 125.4, 55.5))   # Unhealthy
} else if (pm > 35.5) {
return(calcAQI(pm, 150, 101, 55.4, 35.5))    # Unhealthy for Sensitive Groups
} else if (pm > 9.1) {
return(calcAQI(pm, 100, 51, 35.4, 9.1))     # Moderate
} else if (pm >= 0) {
return(calcAQI(pm, 50, 0, 9, 0))            # Good
} else {
return(NA)
}
}
data_purpleair_new <- data_purpleair %>%
select(Cidade, Tipo, sensor_id, date, PM2.5) %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d", , tz = "America/Sao_Paulo")) %>%
select(-date) %>%
drop_na() %>%
dplyr::group_by(Cidade, sample_day) %>%
dplyr::mutate(PM2.5 = mean(PM2.5, na.rm = T)) %>%
unique() %>%
replace(is.na(.), -999) %>% #WORKING AROUND NA VALUES
dplyr::rowwise() %>%
dplyr::mutate(AQI_PM2.5 = aqiFromPM25(PM2.5),
AQI_Qualidade = if_else(!is.na(AQI_PM2.5), AQI_Qualidade(AQI_PM2.5), NA))  %>%
mutate_all(~ ifelse(. < 0, NA, .))
data_purpleair_new <- data_purpleair %>%
select(Cidade, Tipo, sensor_id, date, PM2.5) %>%
dplyr::mutate(sample_day = as.Date(date, format = "%Y-%m-%d", , tz = "America/Sao_Paulo")) %>%
select(-date) %>%
drop_na() %>%
dplyr::group_by(Cidade, sample_day) %>%
dplyr::mutate(PM2.5 = mean(PM2.5, na.rm = T)) %>%
unique() %>%
replace(is.na(.), -999) %>% #WORKING AROUND NA VALUES
dplyr::rowwise() %>%
dplyr::mutate(AQI_PM2.5 = aqiFromPM25(PM2.5),
AQI_Qualidade = ifelse(!is.na(AQI_PM2.5), AQI_Qualidade(AQI_PM2.5), NA))  %>%
mutate_all(~ ifelse(. < 0, NA, .))
load(file = "./data/data_purpleair.Rda")
data_purpleair <- rbind(data_purpleair, data_purpleair_new) %>% unique()
save(data_purpleair, file = "./data/data_purpleair.Rda")
View(data_purpleair)
## or store it manually in '.Renviron':
usethis::edit_r_environ()
